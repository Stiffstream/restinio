project(tests)

find_package(Catch2 CONFIG QUIET)

IF (NOT Catch2_FOUND)
	message( STATUS "Could NOT find Catch2; will use embedded single-header." )
	add_library(Catch2 INTERFACE)
	set_target_properties(Catch2 PROPERTIES
	  INTERFACE_COMPILE_FEATURES  "cxx_alignas;cxx_alignof;cxx_attributes;cxx_auto_type;cxx_constexpr;cxx_defaulted_functions;cxx_deleted_functions;cxx_final;cxx_lambdas;cxx_noexcept;cxx_override;cxx_range_for;cxx_rvalue_references;cxx_static_assert;cxx_strong_enums;cxx_trailing_return_types;cxx_unicode_literals;cxx_user_literals;cxx_variadic_macros"
	)	
	target_include_directories(Catch2 INTERFACE "${CMAKE_SOURCE_DIR}/")
	message (STATUS "Catch2 Include directories: ${CMAKE_SOURCE_DIR}/catch2")
	add_library(Catch2::Catch2 ALIAS Catch2)
ENDIF()

add_subdirectory(default_constructed_settings)
add_subdirectory(ref_qualifiers_settings)
add_subdirectory(header)
add_subdirectory(buffers)
add_subdirectory(response_coordinator)
add_subdirectory(write_group_output_ctx)
add_subdirectory(uri_helpers)
add_subdirectory(socket_options)
add_subdirectory(start_stop)
add_subdirectory(handle_requests)
add_subdirectory(http_pipelining)
add_subdirectory(sendfile)
add_subdirectory(router)
add_subdirectory(transforms/zlib)
add_subdirectory(transforms/zlib_body_appender)
add_subdirectory(transforms/zlib_body_handler)
add_subdirectory(encoders)
add_subdirectory(from_string)
IF (EXISTS TARGET ${SO_5_SHARED_LIB} OR EXISTS TARGET ${SO_5_STATIC_LIB})
	add_subdirectory(websocket) 
ELSE()
	MESSAGE(STATUS "SObjectizer not available, will skip websocket test.")
ENDIF()

if ( OPENSSL_FOUND )
	add_subdirectory(socket_options_tls)
endif ()
